# UltraRAG MCP Servers Docker Image
# Starts all available MCP servers for AI agent access

FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_VISIBLE_DEVICES=""
ENV PYTHONUNBUFFERED=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    curl \
    wget \
    git \
    build-essential \
    libopenblas-dev \
    libomp-dev \
    pkg-config \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Create Python virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip3 install --no-cache-dir -U pip setuptools wheel

# Create working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Install PyTorch CPU
RUN pip3 install --no-cache-dir torch==2.1.0+cpu torchvision==0.16.0+cpu torchaudio==2.1.0+cpu \
    -f https://download.pytorch.org/whl/torch_stable.html

# Copy the entire project
COPY . .

# Install the project in development mode
RUN pip3 install --no-cache-dir -e .

# Create data and logs directories
RUN mkdir -p /app/data /app/logs && \
    chmod -R 777 /app/data /app/logs

# Create startup script
RUN cat > /app/start_mcp_servers.sh << 'EOF'
#!/bin/bash

# UltraRAG MCP Servers Launcher for Docker
set -e

SCRIPT_DIR="/app"
SERVERS_DIR="$SCRIPT_DIR/servers"

# List of available MCP servers
SERVERS=(
    "sayhello"
    "corpus"
    "custom" 
    "evaluation"
    "generation"
    "prompt"
    "reranker"
    "retriever"
    "benchmark"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

start_server() {
    local server_name=$1
    local server_path="$SERVERS_DIR/$server_name/src/${server_name}.py"
    
    if [[ ! -f "$server_path" ]]; then
        print_status $RED "‚ùå Server $server_name not found at $server_path"
        return 1
    fi
    
    print_status $BLUE "üöÄ Starting MCP server: $server_name"
    
    # Start server in background with proper Python path
    cd "$SCRIPT_DIR"
    python3 "$server_path" &
    local pid=$!
    
    # Store PID for cleanup
    echo $pid >> /tmp/ultrarag_mcp_pids
    
    print_status $GREEN "‚úÖ Server $server_name started with PID $pid"
    return 0
}

start_all_servers() {
    print_status $YELLOW "üéØ UltraRAG MCP Servers Launcher (Docker)"
    echo "=================================================="
    
    # Clear PID file
    > /tmp/ultrarag_mcp_pids
    
    local started=0
    for server in "${SERVERS[@]}"; do
        if start_server "$server"; then
            ((started++))
        fi
        sleep 2  # Delay between starts
    done
    
    print_status $GREEN "üéâ Started $started MCP servers"
    echo ""
    print_status $BLUE "Available servers:"
    for server in "${SERVERS[@]}"; do
        echo "  - $server"
    done
}

stop_all_servers() {
    print_status $YELLOW "üõë Stopping all MCP servers..."
    
    if [[ -f /tmp/ultrarag_mcp_pids ]]; then
        while read -r pid; do
            if kill -0 "$pid" 2>/dev/null; then
                print_status $BLUE "Stopping process $pid"
                kill "$pid"
            fi
        done < /tmp/ultrarag_mcp_pids
        rm -f /tmp/ultrarag_mcp_pids
    fi
    
    print_status $GREEN "‚úÖ All servers stopped"
}

cleanup() {
    print_status $YELLOW "üõë Shutdown requested"
    stop_all_servers
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Start all servers
start_all_servers

# Keep container running and monitor servers
print_status $YELLOW "üëÄ Servers running... (Press Ctrl+C to stop)"
while true; do
    sleep 30
    # Check if any servers died and restart them
    if [[ -f /tmp/ultrarag_mcp_pids ]]; then
        while read -r pid; do
            if ! kill -0 "$pid" 2>/dev/null; then
                print_status $YELLOW "‚ö†Ô∏è  Server with PID $pid stopped unexpectedly"
            fi
        done < /tmp/ultrarag_mcp_pids
    fi
done
EOF

# Make startup script executable
RUN chmod +x /app/start_mcp_servers.sh

# Expose ports for MCP servers (if needed)
EXPOSE 8000-8010

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set MCP transport and ports
ENV MCP_TRANSPORT=http
ENV MCP_PORT=8000

# Start all MCP servers
ENTRYPOINT ["/bin/bash", "-c"]
CMD ["python servers/sayhello/src/sayhello.py transport=http port=8000"]
